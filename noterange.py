#!/usr/bin/python

import argparse

global cents_range, args, scaling

def main():
  print '/* This header file was automatically generated by the noterange.py script with the \n' + \
    ' * following arguments: \n' + \
    ' * \n' +\
    ' *   limit {}\n'.format(args.limit) + \
    ' *   length {}\n'.format(args.length) + \
    ' *   scaling factor {}\n'.format(args.scaling) + \
    ' *   centre frequency {}\n'.format(args.frequency) + \
    ' */\n'
  
  print '#ifndef CENTS_H\n#define CENTS_H\n'
  
  decompress_offset = int(round(2**(-cents_range/1200.0) * scaling))
  print '#define DECOMPRESS_OFFSET {0}'.format(decompress_offset)
  decompress_factor = 0
  while compress_cent(args.length - 1, decompress_factor) > 2**16:
    decompress_factor += 1

  print '#define DECOMPRESS_FACTOR {0}'.format(decompress_factor)
  if(args.quiet == False):
    print "#define COMPRESSED_CENTS {" + ", ".join(map(lambda x: str(compress_cent(x, decompress_factor)), range(args.length))) + "}"
  
  print '\n#endif'
  
def compress_cent(i, decompress_factor):
  cent = (i/float(args.length -1) * 2 - 1) * cents_range
  compressed_cent = int(round((2**(cent/1200.0)- 2**(-cents_range/1200.0)) * scaling / (2**decompress_factor)))
  return compressed_cent  

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Generates a header file for a specified note range for the Bwiip synthesizer.')
  parser.add_argument('limit',help='The range above and below the central note, in semitones [default: %(default)s]', type=float, default=12)
  parser.add_argument('-l','--length',help="The length of the arraw to generate [default: %(default)s]", type=int, default=1024)
  parser.add_argument('-q','--quiet',help="Suppress the actual array output; useful for debugging", action="store_true")
  parser.add_argument('-s','--scaling',help="Scaling factor for synthesizer [default: %(default)s]", type=float, default=167503.724544)
  parser.add_argument('-f','--frequency',help="Centre note frequency in Hz [default: %(default)s]", type=float, default=256)

  args = parser.parse_args()
  cents_range = args.limit * 100
  scaling = args.scaling * args.frequency/256.0
  main()