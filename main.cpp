/* Name: main.c
 * Author: Jonathan M. Guberman
 * Copyright: <insert your copyright message here>
 * License: <insert your license reference here>
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "TinyWireM.h"        // I2C library for ATtiny AVR
#include "nunchuck_funcs.h"   // Wii Nunchuck helper functions
#include <avr/pgmspace.h>

 volatile unsigned long accumulator, phase, volume;
 //volatile unsigned char volume;
 unsigned char outvalue;
 

/*
const char squarewave[256] = {
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , 
 -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 , -127 
 };

 const char trianglewave[256] = {
 -127 , -125 , -123 , -121 , -119 , -117 , -115 , -113 , -111 , -109 , -107 , -105 , -103 , -101 , -99 , -97 , 
 -95 , -93 , -91 , -89 , -87 , -85 , -83 , -81 , -79 , -77 , -75 , -73 , -71 , -69 , -67 , -65 , 
 -63 , -61 , -59 , -57 , -55 , -53 , -51 , -49 , -47 , -45 , -43 , -41 , -39 , -37 , -35 , -33 , 
 -31 , -29 , -27 , -25 , -23 , -21 , -19 , -17 , -15 , -13 , -11 , -9 , -7 , -5 , -3 , -1 , 
 1 , 3 , 5 , 7 , 9 , 11 , 13 , 15 , 17 , 19 , 21 , 23 , 25 , 27 , 29 , 31 , 
 33 , 35 , 37 , 39 , 41 , 43 , 45 , 47 , 49 , 51 , 53 , 55 , 57 , 59 , 61 , 63 , 
 65 , 67 , 69 , 71 , 73 , 75 , 77 , 79 , 81 , 83 , 85 , 87 , 89 , 91 , 93 , 95 , 
 97 , 99 , 101 , 103 , 105 , 107 , 109 , 111 , 113 , 115 , 117 , 119 , 121 , 123 , 125 , 127 , 
 127 , 127 , 125 , 123 , 121 , 119 , 117 , 115 , 113 , 111 , 109 , 107 , 105 , 103 , 101 , 99 , 
 97 , 95 , 93 , 91 , 89 , 87 , 85 , 83 , 81 , 79 , 77 , 75 , 73 , 71 , 69 , 67 , 
 65 , 63 , 61 , 59 , 57 , 55 , 53 , 51 , 49 , 47 , 45 , 43 , 41 , 39 , 37 , 35 , 
 33 , 31 , 29 , 27 , 25 , 23 , 21 , 19 , 17 , 15 , 13 , 11 , 9 , 7 , 5 , 3 , 
 1 , -1 , -3 , -5 , -7 , -9 , -11 , -13 , -15 , -17 , -19 , -21 , -23 , -25 , -27 , -29 , 
 -31 , -33 , -35 , -37 , -39 , -41 , -43 , -45 , -47 , -49 , -51 , -53 , -55 , -57 , -59 , -61 , 
 -63 , -65 , -67 , -69 , -71 , -73 , -75 , -77 , -79 , -81 , -83 , -85 , -87 , -89 , -91 , -93 , 
 -95 , -97 , -99 , -101 , -103 , -105 , -107 , -109 , -111 , -113 , -115 , -117 , -119 , -121 , -123 , -125 
 };

 const char sawtoothwave[256] = {
 -127 , -127 , -126 , -125 , -124 , -123 , -122 , -121 , -120 , -119 , -118 , -117 , -116 , -115 , -114 , -113 , 
 -112 , -111 , -110 , -109 , -108 , -107 , -106 , -105 , -104 , -103 , -102 , -101 , -100 , -99 , -98 , -97 , 
 -96 , -95 , -94 , -93 , -92 , -91 , -90 , -89 , -88 , -87 , -86 , -85 , -84 , -83 , -82 , -81 , 
 -80 , -79 , -78 , -77 , -76 , -75 , -74 , -73 , -72 , -71 , -70 , -69 , -68 , -67 , -66 , -65 , 
 -64 , -63 , -62 , -61 , -60 , -59 , -58 , -57 , -56 , -55 , -54 , -53 , -52 , -51 , -50 , -49 , 
 -48 , -47 , -46 , -45 , -44 , -43 , -42 , -41 , -40 , -39 , -38 , -37 , -36 , -35 , -34 , -33 , 
 -32 , -31 , -30 , -29 , -28 , -27 , -26 , -25 , -24 , -23 , -22 , -21 , -20 , -19 , -18 , -17 , 
 -16 , -15 , -14 , -13 , -12 , -11 , -10 , -9 , -8 , -7 , -6 , -5 , -4 , -3 , -2 , -1 , 
 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 
 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 
 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 
 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 
 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 
 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 
 96 , 97 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 
 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 124 , 125 , 126 , 127 
 };

 const char sinewave[256] = {
 0 , 3 , 6 , 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 , 36 , 39 , 42 , 45 , 
 48 , 51 , 54 , 57 , 59 , 62 , 65 , 67 , 70 , 73 , 75 , 78 , 80 , 82 , 85 , 87 , 
 89 , 91 , 94 , 96 , 98 , 100 , 102 , 103 , 105 , 107 , 108 , 110 , 112 , 113 , 114 , 116 , 
 117 , 118 , 119 , 120 , 121 , 122 , 123 , 123 , 124 , 125 , 125 , 126 , 126 , 126 , 126 , 126 , 
 127 , 126 , 126 , 126 , 126 , 126 , 125 , 125 , 124 , 123 , 123 , 122 , 121 , 120 , 119 , 118 , 
 117 , 116 , 114 , 113 , 112 , 110 , 108 , 107 , 105 , 103 , 102 , 100 , 98 , 96 , 94 , 91 , 
 89 , 87 , 85 , 82 , 80 , 78 , 75 , 73 , 70 , 67 , 65 , 62 , 59 , 57 , 54 , 51 , 
 48 , 45 , 42 , 39 , 36 , 33 , 30 , 27 , 24 , 21 , 18 , 15 , 12 , 9 , 6 , 3 , 
 0 , -3 , -6 , -9 , -12 , -15 , -18 , -21 , -24 , -27 , -30 , -33 , -36 , -39 , -42 , -45 , 
 -48 , -51 , -54 , -57 , -59 , -62 , -65 , -67 , -70 , -73 , -75 , -78 , -80 , -82 , -85 , -87 , 
 -89 , -91 , -94 , -96 , -98 , -100 , -102 , -103 , -105 , -107 , -108 , -110 , -112 , -113 , -114 , -116 , 
 -117 , -118 , -119 , -120 , -121 , -122 , -123 , -123 , -124 , -125 , -125 , -126 , -126 , -126 , -126 , -126 , 
 -127 , -126 , -126 , -126 , -126 , -126 , -125 , -125 , -124 , -123 , -123 , -122 , -121 , -120 , -119 , -118 , 
 -117 , -116 , -114 , -113 , -112 , -110 , -108 , -107 , -105 , -103 , -102 , -100 , -98 , -96 , -94 , -91 , 
 -89 , -87 , -85 , -82 , -80 , -78 , -75 , -73 , -70 , -67 , -65 , -62 , -59 , -57 , -54 , -51 , 
 -48 , -45 , -42 , -39 , -36 , -33 , -30 , -27 , -24 , -21 , -18 , -15 , -12 , -9 , -6 , -3 
 };
*/

const uint16_t compressed_cents[1024] PROGMEM = {  
  0, 28, 57, 85, 114, 142, 171, 200, 228, 257, 286, 314, 343, 372, 401, 430, 459, 488, 517, 546, 575, 604, 634, 663, 692, 721, 751, 780, 810, 839, 869, 898, 928, 958, 987, 1017, 1047, 1077, 1106, 1136, 1166, 1196, 1226, 1256, 1286, 1317, 1347, 1377, 1407, 1438, 1468, 1498, 1529, 1559, 1590, 1620, 1651, 1681, 1712, 1743, 1774, 1804, 1835, 1866, 1897, 1928, 1959, 1990, 2021, 2052, 2083, 2115, 2146, 2177, 2209, 2240, 2271, 2303, 2334, 2366, 2397, 2429, 2461, 2493, 2524, 2556, 2588, 2620, 2652, 2684, 2716, 2748, 2780, 2812, 2844, 2877, 2909, 2941, 2974, 3006, 3039, 3071, 3104, 3136, 3169, 3202, 3234, 3267, 3300, 3333, 3366, 3399, 3432, 3465, 3498, 3531, 3564, 3597, 3631, 3664, 3697, 3731, 3764, 3798, 3831, 3865, 3898, 3932, 3966, 4000, 4033, 4067, 4101, 4135, 4169, 4203, 4237, 4271, 4306, 4340, 4374, 4408, 4443, 4477, 4512, 4546, 4581, 4615, 4650, 4685, 4719, 4754, 4789, 4824, 4859, 4894, 4929, 4964, 4999, 5034, 5070, 5105, 5140, 5175, 5211, 5246, 5282, 5317, 5353, 5389, 5424, 5460, 5496, 5532, 5568, 5604, 5640, 5676, 5712, 5748, 5784, 5820, 5857, 5893, 5929, 5966, 6002, 6039, 6075, 6112, 6149, 6185, 6222, 6259, 6296, 6333, 6370, 6407, 6444, 6481, 6518, 6555, 6593, 6630, 6667, 6705, 6742, 6780, 6817, 6855, 6893, 6930, 6968, 7006, 7044, 7082, 7120, 7158, 7196, 7234, 7272, 7311, 7349, 7387, 7426, 7464, 7503, 7541, 7580, 7619, 7657, 7696, 7735, 7774, 7813, 7852, 7891, 7930, 7969, 8008, 8047, 8087, 8126, 8166, 8205, 8245, 8284, 8324, 8363, 8403, 8443, 8483, 8523, 8563, 8603, 8643, 8683, 8723, 8763, 8803, 8844, 8884, 8925, 8965, 9006, 9046, 9087, 9128, 9168, 9209, 9250, 9291, 9332, 9373, 9414, 9455, 9497, 9538, 9579, 9621, 9662, 9704, 9745, 9787, 9828, 9870, 9912, 9954, 9996, 10038, 10080, 10122, 10164, 10206, 10248, 10290, 10333, 10375, 10418, 10460, 10503, 10545, 10588, 10631, 10674, 10716, 10759, 10802, 10845, 10888, 10932, 10975, 11018, 11061, 11105, 11148, 11192, 11235, 11279, 11323, 11366, 11410, 11454, 11498, 11542, 11586, 11630, 11674, 11719, 11763, 11807, 11852, 11896, 11941, 11985, 12030, 12075, 12119, 12164, 12209, 12254, 12299, 12344, 12389, 12434, 12480, 12525, 12570, 12616, 12661, 12707, 12752, 12798, 12844, 12890, 12936, 12982, 13027, 13074, 13120, 13166, 13212, 13258, 13305, 13351, 13398, 13444, 13491, 13538, 13584, 13631, 13678, 13725, 13772, 13819, 13866, 13913, 13961, 14008, 14055, 14103, 14150, 14198, 14246, 14293, 14341, 14389, 14437, 14485, 14533, 14581, 14629, 14677, 14726, 14774, 14822, 14871, 14919, 14968, 15017, 15065, 15114, 15163, 15212, 15261, 15310, 15359, 15409, 15458, 15507, 15557, 15606, 15656, 15705, 15755, 15805, 15855, 15905, 15954, 16005, 16055, 16105, 16155, 16205, 16256, 16306, 16357, 16407, 16458, 16509, 16559, 16610, 16661, 16712, 16763, 16814, 16865, 16917, 16968, 17019, 17071, 17122, 17174, 17226, 17277, 17329, 17381, 17433, 17485, 17537, 17589, 17642, 17694, 17746, 17799, 17851, 17904, 17957, 18009, 18062, 18115, 18168, 18221, 18274, 18327, 18381, 18434, 18487, 18541, 18594, 18648, 18702, 18755, 18809, 18863, 18917, 18971, 19025, 19079, 19134, 19188, 19242, 19297, 19352, 19406, 19461, 19516, 19570, 19625, 19680, 19736, 19791, 19846, 19901, 19957, 20012, 20068, 20123, 20179, 20235, 20290, 20346, 20402, 20458, 20515, 20571, 20627, 20683, 20740, 20796, 20853, 20910, 20966, 21023, 21080, 21137, 21194, 21251, 21308, 21366, 21423, 21481, 21538, 21596, 21653, 21711, 21769, 21827, 21885, 21943, 22001, 22059, 22118, 22176, 22234, 22293, 22352, 22410, 22469, 22528, 22587, 22646, 22705, 22764, 22823, 22883, 22942, 23002, 23061, 23121, 23181, 23241, 23300, 23360, 23421, 23481, 23541, 23601, 23662, 23722, 23783, 23843, 23904, 23965, 24026, 24087, 24148, 24209, 24270, 24331, 24393, 24454, 24516, 24577, 24639, 24701, 24763, 24825, 24887, 24949, 25011, 25074, 25136, 25198, 25261, 25324, 25386, 25449, 25512, 25575, 25638, 25701, 25765, 25828, 25891, 25955, 26018, 26082, 26146, 26210, 26274, 26338, 26402, 26466, 26530, 26595, 26659, 26724, 26788, 26853, 26918, 26983, 27048, 27113, 27178, 27243, 27308, 27374, 27439, 27505, 27571, 27636, 27702, 27768, 27834, 27900, 27967, 28033, 28099, 28166, 28233, 28299, 28366, 28433, 28500, 28567, 28634, 28701, 28768, 28836, 28903, 28971, 29039, 29106, 29174, 29242, 29310, 29378, 29447, 29515, 29583, 29652, 29721, 29789, 29858, 29927, 29996, 30065, 30134, 30203, 30273, 30342, 30412, 30481, 30551, 30621, 30691, 30761, 30831, 30901, 30971, 31042, 31112, 31183, 31254, 31324, 31395, 31466, 31537, 31608, 31680, 31751, 31822, 31894, 31966, 32037, 32109, 32181, 32253, 32325, 32397, 32470, 32542, 32615, 32687, 32760, 32833, 32906, 32979, 33052, 33125, 33198, 33272, 33345, 33419, 33493, 33567, 33640, 33714, 33789, 33863, 33937, 34012, 34086, 34161, 34235, 34310, 34385, 34460, 34535, 34610, 34686, 34761, 34837, 34912, 34988, 35064, 35140, 35216, 35292, 35368, 35445, 35521, 35598, 35674, 35751, 35828, 35905, 35982, 36059, 36137, 36214, 36291, 36369, 36447, 36525, 36602, 36681, 36759, 36837, 36915, 36994, 37072, 37151, 37230, 37309, 37388, 37467, 37546, 37625, 37705, 37784, 37864, 37943, 38023, 38103, 38183, 38263, 38344, 38424, 38505, 38585, 38666, 38747, 38828, 38909, 38990, 39071, 39153, 39234, 39316, 39397, 39479, 39561, 39643, 39725, 39808, 39890, 39972, 40055, 40138, 40221, 40303, 40387, 40470, 40553, 40636, 40720, 40803, 40887, 40971, 41055, 41139, 41223, 41308, 41392, 41476, 41561, 41646, 41731, 41816, 41901, 41986, 42071, 42157, 42242, 42328, 42414, 42500, 42586, 42672, 42758, 42844, 42931, 43018, 43104, 43191, 43278, 43365, 43452, 43540, 43627, 43715, 43802, 43890, 43978, 44066, 44154, 44243, 44331, 44419, 44508, 44597, 44686, 44775, 44864, 44953, 45042, 45132, 45221, 45311, 45401, 45491, 45581, 45671, 45762, 45852, 45943, 46033, 46124, 46215, 46306, 46397, 46489, 46580, 46672, 46763, 46855, 46947, 47039, 47131, 47223, 47316, 47408, 47501, 47594, 47687, 47780, 47873, 47966, 48060, 48153, 48247, 48341, 48435, 48529, 48623, 48718, 48812, 48907, 49001, 49096, 49191, 49286, 49381, 49477, 49572, 49668, 49764, 49859, 49955, 50052, 50148, 50244, 50341, 50437, 50534, 50631, 50728, 50825, 50923, 51020, 51118, 51215, 51313, 51411, 51509, 51608, 51706, 51804, 51903, 52002, 52101, 52200, 52299, 52398, 52498, 52597, 52697, 52797, 52897, 52997, 53097, 53198, 53298, 53399, 53500, 53601, 53702, 53803, 53904, 54006, 54107, 54209, 54311, 54413, 54515, 54618, 54720, 54823, 54925, 55028, 55131, 55234, 55338, 55441, 55545, 55648, 55752, 55856, 55960, 56065, 56169, 56274, 56378, 56483, 56588, 56693, 56799, 56904, 57010, 57115, 57221, 57327, 57433, 57540, 57646, 57753, 57859, 57966, 58073, 58180, 58288, 58395, 58503, 58610, 58718, 58826, 58934, 59043, 59151, 59260, 59368, 59477, 59586, 59696, 59805, 59914, 60024, 60134, 60244, 60354, 60464, 60574, 60685, 60796, 60907, 61018, 61129, 61240, 61351, 61463, 61575, 61687, 61799, 61911, 62023, 62136, 62248, 62361, 62474, 62587, 62700, 62814
  };

 unsigned char joyx, joyy, zbut, accx, accy;
 uint8_t ext_id[6];

ISR (TIMER0_COMPA_vect){
    accumulator += phase;
    
    outvalue = volume*((accumulator >> 31) ? 1 : -1) + 127;
    
    OCR1B = outvalue;
}

int main(void)
{  
    PLLCSR |= _BV(PLLE);               // Enable 64 MHz PLL
    _delay_ms(10);            // Stabilize
    while(!(PLLCSR & _BV(PLOCK)));     // Wait for it...
    PLLCSR |= _BV(PCKE);               // Timer1 source = PLL

    // Set up Timer/Counter1 for PWM output
    TIMSK  = 0;                        // Timer interrupts OFF
    TCCR1  = _BV(CS10);                // 1:1 prescale
    GTCCR  = _BV(PWM1B) | _BV(COM1B1); // PWM B, clear on match
    OCR1C  = 255;                      // Full 8-bit PWM cycle
    OCR1B  = 127;                      // 50% duty at start

    DDRB = _BV(PORTB4);                // Enable PWM output pin
    
    // INTERRUPT SETUP
    TCCR0B = _BV(CS01); 	//CLK_IO/8
    TCCR0A = _BV(WGM01);	// clear on match
    OCR0A = 40; // Approximately 24kHz sampling rate
    TIMSK = (1<<OCIE0A);
    
    // init the DDS phase increment
    // for a 32-bit DDS accumulator, running at Fclock:
    // phase = 2^32*Fout/Fclock (where Fclock is the refresh rate)
    // FIX MATH LATER
    // phase = (long)(167503.724544*660.0);    

    // Enable interrupts for sound generation
    sei();

    do{
      _delay_ms(100);
      nunchuck_init(ext_id);
    } while(ext_id[2] != 0xA4);
    //if(ext_id[0] == 0 && ext_id[1] == 0 && ext_id[2] == 0xA4 && ext_id[3] == 0x20 && ext_id[4] == 0x01 && ext_id[5] == 0x01)
    {
      for(;;){
        if(nunchuck_get_data()){
          if(nunchuck_zbutton() == 0){
            phase = (((long)pgm_read_word(&compressed_cents[nunchuck_accelx()]) << 2) + 83752) << 8;
          }
          if(nunchuck_cbutton() == 0){
            volume = (nunchuck_accely() >> 2) - 75;
          }
        } else {
          volume = 0;
        }

        _delay_ms(10);
      }
    };
    
    while(true){
      volume = 0;
    };
    
    return 0;   /* never reached */
}
